from Crypto.Util.number import long_to_bytes, bytes_to_long

modulus = '00a77975db01fd340ed69297aa41ecca9dda1ba0d3532058faeec3d8e4eb6ceb83e262bd0c6b0097deb6c44100bd351c524af77c5bd3ea4152362e7da4a20ef009ca3997a5423f9ce089a3eaed973dcb495ccd76dd1896603b67f893a33d95e85ea36484ce33fff91af2f3a1b7baa2a426f76ed48322eea275397cc466886174e2c1d55a7a319a80900a6d1c89e2ce842f509762d6c7c89185e0df3abc2c0a71be1e5e1030d77478359c5ca7c2357bc6e4216ee2d399e58fe5337165a50f91e084ac3126a9408b8fa31252c8c12955e51628a991339a3555bf100b0e6f00874e11b8a0188f723668a6ae92bd3c3ecd11a6f79021dbba7bf3bce16e901842df6835'
m = int(modulus, 16)
e = 65537
private_exponent = '669a44392bebcb73f7c391c58e641af24088c2ac157670ed3350ab55fc621b9c0e1b3e05189d216e21fcf47216792e63c0680539610858829c8d390e9ef695daf998f52e1afb4c0a48693369e249ca7ca4ad80500e5b3a93caac010f76909bef371d433beda1ba24e789999f2d69ad35ee4b6948fa22c7471834374335f4b71da327d3921e541bf746b09617bf303fa70b0d119fb40216075bf0b53bc94ae96d926fd1908eda7cd0615da4988d164244fdc174cc02621f71acc62f71d1b8e00392f52956cd563a3777f249e522f4a7587519a4e62eeeae5506e8b60f1fbe33d58fd73e9309f4708fa44505a198990a29c85600da1c39a799327d20930db2c1c1'
d = int(private_exponent, 16)
prime1 = '00dd78dd7613ad2c7f4e14bb85aaec7b23fc0ee112b446dca57b9b768f4058712d66ccfd96c23c98334ffc48db59e542e58c65db14c32e285daa4aae5801a52f35c1ac6bd8ab04f42106103fc4976a83e6ed13bc58505f33feec5d8f3402690f784c17ff7c435f665a63f0d1ddacd05cc232d77f46e1ee2818b016cb526dab8f91'
p = int(prime1, 16)
prime2 = '00c19580f0088a6defbacf3becf1c10dbc2e692bd867aedc53f5a26dbbdbfca8e6486ce3a5aa500fa1b3ac39b41010259f6a348e2265d2c702a26b8129b627cc9687dd89c71948c38678c45ce1af03a01858c127eabd065ed5757d2c8c653a44fa0c005383d1190f71d58725c33b643d91b800ab4d9000f0854d018561d3198465'
q = int(prime2, 16)

n = p * q
# phi_of_N = (p - 1) * (q - 1)
# x = e * d
# res = x % phi_of_N

msg = b'I solemnly swear to learn applied cryptography. Even though there are not enough graded assignments to incentivize the needed hours I will: 1) work problems 2) ask questions 3) ponder start-ups 4) think in a paranoid fashion 5) get it done without excuse'
msg_as_int = bytes_to_long(msg)
# Calculate sigma
sigma = pow(msg_as_int, d, n)
print('n: ', n)
print('e: ', e)
print('signature', sigma)
# pow(msg, d, n) or sigma:

check = pow(sigma, e, n)
print('check = msg', check == msg_as_int)
print('msg_as_int < m', msg_as_int < m)

decryption = long_to_bytes(check)
print(decryption)

# Pick someone else's signature and verify it.
# Brandon Cox
n=4158916957612766447474168715164891699510585970427508784080581469019932450298517109458013894081618959643692134259246526352142717678152956188314948129195210874108302490441854126286145653184315893786564926567618013107012406596892504747640985476306138497348076276619092445010138731986179413279842921077381890342021240784205933225307665219376261672428436014685895802815110443794496838676573802775486660409068125138052464183760446650441814510318136844162733413494735997421533487481979141891230620413611059557006718035001198006753663260643906721439054693463225188268525333046731964583592331638538303615779016208787063610493778842425399286824072477760588097197971520622351832117533804314876045629819432870867978767125382376797115458879578603042691843855608217282138610882566735926100874754076206780264836920851658220531348202361739711036329994873414782976992623990162750895160884363055513974408726829631945204059798061913574986193803
e=65537
ciphertext=436070718808317300746249604216598378984020949881359922586440097431390725294136203375312323938259401805184913873441549793558480337911277011883445094526189906831951687676031392822849456776733515953902352972245953868650341606355516169535826547198784468584431671198402178633083011352601314762643639479204549236403668930793420998803912525166071823331337841988851991199912165205837708537443368915343829054896983095440519474801701412951389294410696368976443913224302460613289856178327199369904195424725375925554956842384620850974764322171265574779921235805932762203024509335624200100531283479937472300754330024654033251725588435310182493104250584692948315364865268670912393654858519553317163361066407055667158683548038078227678301314733756322157666137791428923361572877791429219982540375160288069909352744372773296163625856679040961450549885279207255938896381857653440717749281238115121322870732526067064898791732571757633566295262
check = pow(ciphertext, e, n)
decryption = long_to_bytes(check)
print(decryption.decode('utf-8'))
