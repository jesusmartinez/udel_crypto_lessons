import random
from Crypto.Util.number import GCD, long_to_bytes, bytes_to_long, inverse


g = 2
prime = b'E912ECF78A51FC5BBFA26A00E07A0CEC5ECEB897891643DD7DDD8056A51C71124258D52DAEF464B929F6397101F00C67CFC09B3D068B522E1C8B566431936C3A606A47928582F0D8D6B23F9019FF06A900CD5AD97E02CD3DEAA0495C968A2345858C6556623A61124C711DC0708999C08D5A349592F37DFE07A49C0D82241403'
p = int(prime, 16)

top = 2048
my_secret = random.randint(2, top)
while GCD(my_secret, p-1) != 1:
    my_secret = random.randint(2, top)

my_K = pow(g, my_secret, p)
print("My public: " + str(my_K))

my_message = b'El gamal encryption example so far so good'
msg_as_int = bytes_to_long(my_message)
# msg_as_int = int(binascii.hexlify(my_message), 16)
# print(msg_as_int)
C = msg_as_int * my_K % p
print("My ciphertext:", C)

### On the other side
m = C * inverse(my_K, p) % p
print(long_to_bytes(m).decode('utf-8'))


### alalicon's part
K = 53603736764814033375878173196927156888824267311996170633005028212565501455903873614552372699890018289770982289298819472781206427537049111859402362859373228397211506548477717140234368404189199469531782687037763365743919073329125198109819002541888077754609141374764552049477618499609733769249156049865961279429
ciphertext = 144335909693519862934025758742712114469010749246206924588477882339949780110824459025663522927367256421384752989369054823463178307752358732909460645803102700545615874669774715255576457591879923888650151230060876378497032849392427237709573022300130135291073043936338923712892881643702179230383117287947136145841

# compute
m = ciphertext * inverse(K, p) % p
print(long_to_bytes(m).decode('utf-8'))
